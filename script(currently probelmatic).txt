// list i need to built:
// - inventory system
// - player stats
// - combat system (using 20 side dice)
// - map
// - story (with secret path to achieve different ending)
// - add weapon and armor
// - player class based on equipment

// Game title - Path: Select

let playerStats = {
  str : 0,
  dex : 0,
  int : 0,
  cha : 0,
  wis : 0,
  con : 0,
};
let inventory = [];
let equippedWeapon1 = null;
let equippedWeapon2 = null;
let equippedArmor = null;
let equippedAccessories1 = null;
let equippedAccessories2 = null;

const button1 = document.querySelector("#button1");
const button2 = document.querySelector("#button2");
const button3 = document.querySelector("#button3");
const button4 = document.querySelector("#button4");
const customizeButton = document.querySelector("#customize-button");
const createCharacter = document.querySelector("#create-character");
const text = document.querySelector("#text");
const strText = document.querySelector("#str-Text");
const dexText = document.querySelector("#dex-Text");
const intText = document.querySelector("#int-Text");
const wisText = document.querySelector("#wis-Text");
const conText = document.querySelector("#con-Text");
const chaText = document.querySelector("#cha-Text");
const weaponList = [
    {name: 'dagger', hand: 1, type: 'weapon', attack: 5, iconIndex: 0,criticalRate: 0, criticalDmg: 0, defense: 0, penetrationDmg: 0, stunDmg: 0, bleedDmg: 0, poisonDmg: 0, fireDmg: 0, freezeDmg: 0, lightningDmg: 0, spriteSheet: 'spriteSheetW1', x: 0, y: 335},
    {name: 'one-handed sword', hand: 1,  type: 'weapon',attack: 15, criticalRate: 0, criticalDmg: 0, defense: 0, penetrationDmg: 0, stunDmg: 0, bleedDmg: 0, poisonDmg: 0, fireDmg: 0, freezeDmg: 0, lightningDmg: 0, spriteSheet: 'spriteSheetW1', x: 47, y: 335},
    {name: 'bastard sword', hand: 1,  type: 'weapon',attack: 15, criticalRate: 0, criticalDmg: 0, defense: 0, penetrationDmg: 0, stunDmg: 0, bleedDmg: 0, poisonDmg: 0, fireDmg: 0, freezeDmg: 0, lightningDmg: 0, spriteSheet: 'spriteSheetW1', x: 144, y: 335},
    {name: 'katana', hand: 2,  type: 'weapon',attack: 25, criticalRate: 0, criticalDmg: 0, defense: 0, penetrationDmg: 0, stunDmg: 0, bleedDmg: 0, poisonDmg: 0, fireDmg: 0, freezeDmg: 0, lightningDmg: 0, spriteSheet: 'spriteSheetW1', x: 0, y: 383},
    {name: 'war axe', hand: 2, type: 'weapon', attack: 35, criticalRate: 0, criticalDmg: 0, defense: 0, penetrationDmg: 0, stunDmg: 0, bleedDmg: 0, poisonDmg: 0, fireDmg: 0, freezeDmg: 0, lightningDmg: 0, spriteSheet: 'spriteSheetW1',  x: 528, y: 287},
    {name: 'spear', hand: 2, type: 'weapon', attack: 30, criticalRate: 0, criticalDmg: 0, defense: 0, penetrationDmg: 0, stunDmg: 0, bleedDmg: 0, poisonDmg: 0, fireDmg: 0, freezeDmg: 0, lightningDmg: 0, spriteSheet: 'spriteSheetW1', x: 240, y: 335},
    {name: 'recurve bow', hand: 2, type: 'weapon', attack: 20, criticalRate: 0, criticalDmg: 0, defense: 0, penetrationDmg: 0, stunDmg: 0, bleedDmg: 0, poisonDmg: 0, fireDmg: 0, freezeDmg: 0, lightningDmg: 0, spriteSheet: 'spriteSheetW1', x: 528, y: 432},
    {name: 'warhammer', hand: 2, type: 'weapon', attack: 30, criticalRate: 0, criticalDmg: 0, defense: 0, penetrationDmg: 0, stunDmg: 0, bleedDmg: 0, poisonDmg: 0, fireDmg: 0, freezeDmg: 0, lightningDmg: 0, spriteSheet: 'spriteSheetW1', x: 336, y: 383},
    {name: 'wooden wand', hand: 1, type: 'weapon', attack: 30, criticalRate: 0, criticalDmg: 0, defense: 0, penetrationDmg: 0, stunDmg: 0, bleedDmg: 0, poisonDmg: 0, fireDmg: 0, freezeDmg: 0, lightningDmg: 0, spriteSheet: 'spriteSheetW1', x: 0, y: 526},
    {name: 'zweihander', hand: 2, type: 'weapon', attack: 45, criticalRate: 0, criticalDmg: 0, defense: 0, penetrationDmg: 0, stunDmg: 0, bleedDmg: 0, poisonDmg: 0, fireDmg: 0, freezeDmg: 0, lightningDmg: 0, spriteSheet: 'spriteSheetW1', x: 528, y: 383},
    {name: 'wizard staff', hand: 2, type: 'weapon', attack: 45, criticalRate: 0, criticalDmg: 0, defense: 0, penetrationDmg: 0, stunDmg: 0, bleedDmg: 0, poisonDmg: 0, fireDmg: 0, freezeDmg: 0, lightningDmg: 0, spriteSheet: 'spriteSheetW1', x: 144, y: 526},
    {name: 'round wooden shield', hand: 1, type: 'weapon', attack: 45, criticalRate: 0, criticalDmg: 0, defense: 0, penetrationDmg: 0, stunDmg: 0, bleedDmg: 0, poisonDmg: 0, fireDmg: 0, freezeDmg: 0, lightningDmg: 0, spriteSheet: 'spriteSheetW1', x: 337, y: 526},
    // need to add special or ability bonus to the weaponList
];
const armorList = [
    {name: 'padded armor', type: 'armor', addedHealth: 0, defense: 0, resStun: 0, resBleed: 0, resPoison: 0, resFire: 0, resFreeze: 0, resLightning: 0, spriteSheet: 'spriteSheetAmor', x: 32, y: 32},
    {name: 'splint mail', type: 'armor', addedHealth: 0, defense: 0, resStun: 0, resBleed: 0, resPoison: 0, resFire: 0, resFreeze: 0, resLightning: 0, spriteSheet: 'spriteSheetAmor', x: 32, y: 0},
    {name: 'mage robe', type: 'armor', addedHealth: 0, defense: 0, resStun: 0, resBleed: 0, resPoison: 0, resFire: 0, resFreeze: 0, resLightning: 0, spriteSheet: 'spriteSheetAmor', x: 32, y: 128},
    {name: 'half-plate armor', type: 'armor', addedHealth: 0, defense: 0, resStun: 0, resBleed: 0, resPoison: 0, resFire: 0, resFreeze: 0, resLightning: 0, spriteSheet: 'spriteSheetAmor', x: 32, y: 256},
    {name: 'wizard cloth', type: 'armor', addedHealth: 0, defense: 0, resStun: 0, resBleed: 0, resPoison: 0, resFire: 0, resFreeze: 0, resLightning: 0, spriteSheet: 'spriteSheetAmor', x: 32, y: 64},
    {name: 'plate armor', type: 'armor', addedHealth: 0, defense: 0, resStun: 0, resBleed: 0, resPoison: 0, resFire: 0, resFreeze: 0, resLightning: 0, spriteSheet: 'spriteSheetAmor', x: 32, y: 160},
    {name: 'robe of solomon', type: 'armor', addedHealth: 0, defense: 0, resStun: 0, resBleed: 0, resPoison: 0, resFire: 0, resFreeze: 0, resLightning: 0, spriteSheet: 'spriteSheetAmor', x: 32, y: 192},
    {name: 'scale of níðhöggr', type: 'armor', addedHealth: 0, defense: 0, resStun: 0, resBleed: 0, resPoison: 0, resFire: 0, resFreeze: 0, resLightning: 0, spriteSheet: 'spriteSheetAmor', x: 32, y: 224},
    {name: 'plate of cronus', type: 'armor', addedHealth: 0, defense: 0, resStun: 0, resBleed: 0, resPoison: 0, resFire: 0, resFreeze: 0, resLightning: 0, spriteSheet: 'spriteSheetAmor', x: 32, y: 96},
    //this for for armor
];
const enemies = [
    {name: 'slime', level: 2, health: 0, attack: 0, defense: 0, criticalRate: 0, criticalDmg: 0, penetrationDmg: 0, stunDmg: 0, bleedDmg: 0, poisonDmg: 0, fireDmg: 0, lightningDmg: 0, resStun: 0, resBleed: 0, resPoison: 0, resFire: 0, resFreeze: 0, resLightning: 0},
    {name: 'king slime', level: 2, health: 0, attack: 0, defense: 0, criticalRate: 0, criticalDmg: 0, penetrationDmg: 0, stunDmg: 0, bleedDmg: 0, poisonDmg: 0, fireDmg: 0, lightningDmg: 0, resStun: 0, resBleed: 0, resPoison: 0, resFire: 0, resFreeze: 0, resLightning: 0},
    {name: 'wounded orc soldier', level: 5, health: 0, attack: 0, defense: 0, criticalRate: 0, criticalDmg: 0, penetrationDmg: 0, stunDmg: 0, bleedDmg: 0, poisonDmg: 0, fireDmg: 0, lightningDmg: 0, resStun: 0, resBleed: 0, resPoison: 0, resFire: 0, resFreeze: 0, resLightning: 0},
    {name: 'orc soldier', level: 10, health: 0, attack: 0, defense: 0, criticalRate: 0, criticalDmg: 0, penetrationDmg: 0, stunDmg: 0, bleedDmg: 0, poisonDmg: 0, fireDmg: 0, lightningDmg: 0, resStun: 0, resBleed: 0, resPoison: 0, resFire: 0, resFreeze: 0, resLightning: 0},
    {name: 'general demon', level: 15, health: 0, attack: 0, defense: 0, criticalRate: 0, criticalDmg: 0, penetrationDmg: 0, stunDmg: 0, bleedDmg: 0, poisonDmg: 0, fireDmg: 0, lightningDmg: 0, resStun: 0, resBleed: 0, resPoison: 0, resFire: 0, resFreeze: 0, resLightning: 0},
    {name: 'warlord', level: 20, health: 0, attack: 0, defense: 0, criticalRate: 0, criticalDmg: 0, penetrationDmg: 0, stunDmg: 0, bleedDmg: 0, poisonDmg: 0, fireDmg: 0, lightningDmg: 0, resStun: 0, resBleed: 0, resPoison: 0, resFire: 0, resFreeze: 0, resLightning: 0},
    {name: 'sauron', level: 20, health: 0, attack: 0, defense: 0, criticalRate: 0, criticalDmg: 0, penetrationDmg: 0, stunDmg: 0, bleedDmg: 0, poisonDmg: 0, fireDmg: 0, lightningDmg: 0, resStun: 0, resBleed: 0, resPoison: 0, resFire: 0, resFreeze: 0, resLightning: 0},
    {name: 'bandit', level: 7, health: 0, attack: 0, defense: 0, criticalRate: 0, criticalDmg: 0, penetrationDmg: 0, stunDmg: 0, bleedDmg: 0, poisonDmg: 0, fireDmg: 0, lightningDmg: 0, resStun: 0, resBleed: 0, resPoison: 0, resFire: 0, resFreeze: 0, resLightning: 0},
    {name: 'human soldier', level: 10, health: 0, attack: 0, defense: 0, criticalRate: 0, criticalDmg: 0, penetrationDmg: 0, stunDmg: 0, bleedDmg: 0, poisonDmg: 0, fireDmg: 0, lightningDmg: 0, resStun: 0, resBleed: 0, resPoison: 0, resFire: 0, resFreeze: 0, resLightning: 0},
    {name: 'hero fellowship', level: 15, health: 0, attack: 0, defense: 0, criticalRate: 0, criticalDmg: 0, penetrationDmg: 0, stunDmg: 0, bleedDmg: 0, poisonDmg: 0, fireDmg: 0, lightningDmg: 0, resStun: 0, resBleed: 0, resPoison: 0, resFire: 0, resFreeze: 0, resLightning: 0},
    {name: 'the hero', level: 20, health: 0, attack: 0, defense: 0, criticalRate: 0, criticalDmg: 0, penetrationDmg: 0, stunDmg: 0, bleedDmg: 0, poisonDmg: 0, fireDmg: 0, lightningDmg: 0, resStun: 0, resBleed: 0, resPoison: 0, resFire: 0, resFreeze: 0, resLightning: 0},
    {name: 'fallen hero', level: 25, health: 0, attack: 0, defense: 0, criticalRate: 0, criticalDmg: 0, penetrationDmg: 0, stunDmg: 0, bleedDmg: 0, poisonDmg: 0, fireDmg: 0, lightningDmg: 0, resStun: 0, resBleed: 0, resPoison: 0, resFire: 0, resFreeze: 0, resLightning: 0},
];
const items = [
  {name: 'health potion', type: 'consumable', spriteSheet: 'spriteSheetW1', x: 528, y: 192},
  {name: 'sanity potion', type: 'consumable', spriteSheet: 'spriteSheetW1', x: 384, y: 192},
  {name: 'rope', type: 'equipment', spriteSheet: 'spriteSheetW1', x: 143, y: 287},
  {name: 'shovel', type: 'equipment', spriteSheet: 'spriteSheetW1', x: 102, y: 287},
  {name: 'pickaxe', type: 'equipment', spriteSheet: 'spriteSheetW1', x: 240, y: 287 },
  {name: 'key', type: 'equipment', spriteSheet: 'spriteSheetW1', x: 528, y: 143},
  {name: 'book of knowledge', type: 'consumable', spriteSheet: 'spriteSheetW1', x: 336, y: 576},
  {name: 'stamina book', type: 'consumable', spriteSheet: 'spriteSheetW1', x: 432, y: 576},
  {name: 'strength book', type: 'consumable', spriteSheet: 'spriteSheetW1', x: 384, y: 576},
];

// Load icon 
const canvasList = {
  weapon1: {
    canvas: document.getElementById("weapon1-canvas"),
    spriteSheet: new Image(),
    spriteSrc: './images/roguelikeitemsx3.png',
    width: 50,
    height: 50,
    spriteWidth: 49,
    spriteHeight: 49,
  },
  weapon2: {
    canvas: document.getElementById("weapon2-canvas"),
    spriteSheet: new Image(),
    spriteSrc: './images/roguelikeitemsx3.png',
    width: 50,
    height: 50,
    spriteWidth: 49,
    spriteHeight: 49,
  },
  armor: {
    canvas: document.getElementById("armor-canvas"),
    spriteSheet: new Image(),
    spriteSrc: './images/armor_sheet_32x32.png',
    width: 50,
    height: 50,
    spriteWidth: 32,
    spriteHeight: 32,
  },
  accessories1: {
    canvas: document.getElementById("wearable-acccessories1-canvas"),
    spriteSheet: new Image(),
    spriteSrc: './images/roguelikeitemsx3.png',
    width: 50,
    height: 50,
    spriteWidth: 49,
    spriteHeight: 49,
  },
  accessories2: {
    canvas: document.getElementById("wearable-acccessories2-canvas"),
    spriteSheet: new Image(),
    spriteSrc: './images/roguelikeitemsx3.png',
    width: 50,
    height: 50,
    spriteWidth: 49,
    spriteHeight: 49,
  },
};

// To initialise canvas ctx and images
Object.values(canvasList).forEach(config => {
  config.ctx = config.canvas.getContext('2d');
  config.spriteSheet.src = config.spriteSrc;
});

const renderIcon = (type, xPos, yPos) => {
  const config = canvasList[type];
  if (!config || !config.ctx) {
    console.error(`invalid type: ${type}`);
    return;
  }
  config.spriteSheet.onload = () => {
    config.ctx.clearRect(0, 0 ,config.width, config.height);
    config.ctx.drawImage( config.spriteSheet, xPos, yPos, config.spriteWidth, config.spriteHeight, 0, 0, config.width, config.height);
  };
  config.spriteSheet.src = config.spriteSrc
};
// Load icon end here ---

// Toggle hide and show inventory
const inventoryButton = () => {
    let x = document.getElementById("inventory");
    if (x.style.display === "block") {
      x.style.display = "none";
    } else {
      x.style.display = "block";
    }
};

// Toggle show character creation modal
const toggleToShow = () => {
  let x = document.getElementById('pop-up-character-customization-menu');
  if (x.style.display === "block") {
    x.style.display = "none";
  } else {
    x.style.display = "block";
  }
};

// This is Equipment System
// const inventoryItems = []; // To store equipments and items
// function itemAdd () {}; // To add and update equipments and items
// function itemFinds () {}; // To find equipments and items from the array
// inventory: how to limit how many object inside array based on how many inventory <div> exists
// --Equipment system end here--

// function(3)
const selectWeaponOption = document.getElementById("weapon-select");
const selectArmorOption = document.getElementById("armor-select");
const selectedWeaponEquip1 = document.getElementById("weapon1");
const selectedArmorEquip = document.getElementById("armor");
const addEquipMessage = document.getElementById("add-equip-message");

weaponList.forEach((weapon, index) => {
  let option = document.createElement("option");
  option.value = index;
  option.text = weapon.name;
  selectWeaponOption.appendChild(option);
});
armorList.forEach((armor, index) => {
  let option = document.createElement("option");
  option.value = index;
  option.text = armor.name;
  selectArmorOption.appendChild(option);
});
// function(3) end here --

// function(2)  to check if name has been selected (done)
const givenName = ['Henry', 'Charles', 'Winston', 'Jean', 'Genghis', 'Liu', 'Yamato', 'Cao Cao'];
const surname = ['Einstein', 'Bonaparte', 'Voltaire', 'Bach', 'Li', 'Mao', 'Zhou', 'Ieyasu', 'Satou'];
const selectGivenName = document.getElementById("given-name");
const selectSurname = document.getElementById("surname");
// These to loop through the array and create option elements for both Given Name and Surname option
givenName.forEach((optionText, index) => {
  let option = document.createElement("option");
  option.value = optionText;
  option.text = optionText;
  selectGivenName.appendChild(option);
});
surname.forEach((optionText, index) => {
  let option = document.createElement("option");
  option.value = optionText;
  option.text = optionText;
  selectSurname.appendChild(option);
});
// function(2) end here --

// Function(4)
// Limiting the value of stat inside a group of input
const inputsStats = document.querySelectorAll(".stat-input");
const totalSumElement = document.getElementById("sum-stats");
const maxInputsStats = 48; // Max point allocation

const calculateSumStats = () => {
  let sumStats = 0;
  inputsStats.forEach(input => {
    const value = parseFloat(input.value) || 0;
    sumStats += value;
  });
  if (sumStats > maxInputsStats) {
    sumStats = maxInputsStats;
  }
  totalSumElement.textContent = sumStats;
// Points allocation based on how much left points that can be distributed
  const remaining = maxInputsStats - sumStats;
  inputsStats.forEach(input => {
    const value = parseFloat(input.value) || 0;
    input.max = Math.min(30, remaining + value);
  });
};

inputsStats.forEach(input => {
  input.addEventListener("input", calculateSumStats);
});

// Handling input value changes with wheel and arrow keys
const inputsStatsAll = [
  document.getElementById("str-input"),
  document.getElementById("dex-input"),
  document.getElementById("int-input"),
  document.getElementById("cha-input"),
  document.getElementById("wis-input"),
  document.getElementById("con-input"),
];

inputsStatsAll.forEach(input => {
  input.addEventListener("keydown", (event) =>{
    // Allow only one character input
    if (input.value.length >= 1 && !['Backspace', 'Delete', 'ArrowLeft', 'ArrowRight'].includes(event.key)) {
      event.preventDefault();
    }
    // Handle ArrowUp and ArrowDown for increasing/decreasing values
    if (event.key === "ArrowUp") {
      event.preventDefault();
      input.value = Math.min(input.max || 30, parseFloat(input.value) + 1);
    } else if (event.key === "ArrowDown") {
      event.preventDefault();
      input.value = Math.max(input.min || 1, parseFloat(input.value) - 1);
    }
    calculateSumStats();
  });
});

inputsStatsAll.forEach(input => {
  input.addEventListener("wheel", (event) => {
    event.preventDefault();
    const newValue = parseFloat(input.value) + (event.deltaY < 0 ? 1 : -1);
    input.value = Math.max(input.min || 0, Math.min(input.max || 30, newValue));
    calculateSumStats();
  });
});
// function(4) end here --
// Function to add inventory slots
// inventory capacities based on player CON
const inventoryContainer = document.getElementById('storage-inventory');
const inventoryCanvases = []; // To store canvas elements
let counterCon = 0; // To track how many slots have been added
let currentStatSlots = 0; // Tracks how many slots were added based on stats
const itemInventoryMap = {}; // Map to track which item is associated with each slot

// Function to add inventory slots dynamically
const addInventorySlots = (count) => {
  for (let i = 0; i < count; i++) {
    const newDiv = `<div class="stored"><canvas id="slot-${counterCon}" width="50" height="50"></canvas></div>`;
    inventoryContainer.insertAdjacentHTML('beforeend', newDiv);
    const canvasInsideInventory = inventoryContainer.lastElementChild.querySelector('canvas'); // Get last added canvas
    inventoryCanvases.push(canvasInsideInventory); // Store the canvas in inventoryCanvases array

    // Initialize the map with null (empty slot)
    itemInventoryMap[`slot-${counterCon}`] = null;
    counterCon++;
  }
};

const addInventorySlotByStats = () => {
  const totalSlotsNeeded = Math.floor(playerStats.con / 3); // Total slots needed based on player CON
  const newSlots = totalSlotsNeeded - currentStatSlots; // Only add the slots that haven’t added yet

  if (newSlots > 0) {
    addInventorySlots(newSlots);
    currentStatSlots += newSlots; // Update the number of slots added for stats
  }
};
// End here --

// all function combined
document.getElementById("customize-button").addEventListener('click', () => {
  // Function(3) armor & weapon
  const selectedWeaponIndex = selectWeaponOption.value;
  const selectedArmorIndex = selectArmorOption.value;
  addEquipMessage.textContent = ''; // To clear previous message
  if (selectedWeaponIndex === "" || selectedArmorIndex === "") {
    addEquipMessage.textContent = 'Please choose armor and weapon';
    return false;
  }
  // Get weapon and armor by index
  // Get weapon and armor as object to inventory
  const selectedWeaponObject = weaponList[selectedWeaponIndex];
  const selectedArmorObject = armorList[selectedArmorIndex];
  // Set the content of the 'weapon' and 'armor' divs
  // Store the selected equipment in object
  equippedWeapon1 = selectedWeaponObject;
  equippedArmor = selectedArmorObject;
  // Render icon
  renderIcon('weapon1', selectedWeaponObject.x, selectedWeaponObject.y);
  renderIcon('armor', selectedArmorObject.x, selectedArmorObject.y);
  // Load icon end here --

  // Function(2) to check if name has been selected (done)
  let addNameMessage = document.getElementById("name-add-message");
  addNameMessage.textContent = ''; // Clear previous messages
  if (selectGivenName.value === "" || selectSurname.value === "") {
    addNameMessage.textContent = 'Please choose both Given Name and Surname';
    return false;
  }
  const selectedGivenName = selectGivenName.value;
  const selectedSurname = selectSurname.value;
  const playerNameSelected = document.getElementById("player-name-selected");
  playerNameSelected.textContent = `Name: ${selectedGivenName} ${selectedSurname}`

  // Function(4) to add point to stats
  const strValue = parseFloat(document.getElementById("str-input").value);
  const dexValue = parseFloat(document.getElementById("dex-input").value);
  const intValue = parseFloat(document.getElementById("int-input").value);
  const chaValue = parseFloat(document.getElementById("cha-input").value);
  const wisValue = parseFloat(document.getElementById("wis-input").value);
  const conValue = parseFloat(document.getElementById("con-input").value);
  const inputs = [strValue, dexValue, intValue, chaValue, wisValue, conValue];
  
  // Filter out invalid stats (NaN or 0)
  const statsValue = inputs.filter(stat => !isNaN(stat) && stat > 0);
  const totalStats = statsValue.reduce((acc, stat) => acc + stat, 0);
  let addStatsMessage = document.getElementById("point-add-message");
  addStatsMessage.textContent = ''; // Clear previous messages
  
  // To prevent any of the stats value left 0
  if (isNaN(strValue) || isNaN(dexValue) || isNaN(intValue) || isNaN(chaValue) || isNaN(wisValue) || isNaN(conValue) || strValue <= 0 || dexValue <= 0 || intValue <= 0 || chaValue <= 0 || wisValue <= 0 || conValue <= 0) {
    addStatsMessage.textContent = 'Please fill all the stats';
    return false;
  }

  // Check if the sum of valid stats is 48
  if (statsValue.length === 0 || totalStats !== 48) {
    addStatsMessage.textContent = `You have allocated ${totalStats} points, but you need to allocate exactly 48 points`;
    return false;
  }

  // Update character stats
  playerStats.str = strValue; strText.innerText = playerStats.str;
  playerStats.dex = dexValue; dexText.innerText = playerStats.dex;
  playerStats.int = intValue; intText.innerText = playerStats.int;
  playerStats.cha = chaValue; chaText.innerText = playerStats.cha;
  playerStats.wis = wisValue; wisText.innerText = playerStats.wis;
  playerStats.con = conValue; conText.innerText = playerStats.con;

  //condition where a div is added every time the value of a Con can be divided by 3. You would also need to increment con (e.g., by 1 each time) and check if it is divisible by 3. If it is divisible by 3, you add the div element to the DOM.
  // Check and add a div each time con is divisible by 3
  // Use a loop to add divs for each multiple of 3 (if con is updated many times)
  addInventorySlots(6);
  addInventorySlotByStats();
  // To close both pop-up customize charater and create charatcer button
  document.getElementById('pop-up-character-customization-menu').style.display = 
  (document.getElementById('pop-up-character-customization-menu').style.display === "none") ? "block" : "none";
  document.getElementById('create-character').style.display = 
  (document.getElementById('create-character').style.display === "none") ? "block" : "none";
  //showTextNode(1); // To show the story after creating palyer stats

  storyText.innerText = ""

  startGame();
  storyTextOption();
  return true;
});

// Function to always checks and update every time player stats change
function updatePlayerStats (newStrAdded, newDexAdded, newIntAdded, newChaAdded, newWisAdded, newConAdded) { // This function need to be updated
  // Update the global stats value
  playerStats.str = newStrAdded; //added later
  playerStats.dex = newDexAdded; //added later
  playerStats.int = newIntAdded; //added later
  playerStats.cha = newChaAdded; //added later
  playerStats.wis = newWisAdded; //added later
  playerStats.con = newConAdded;

  let counterCon = 0;
  for (let i = 3; i <= con; i += 3) {
    const newDiv = `<div class="stored"><canvas></canvas></div>`;
    inventoryContainer.insertAdjacentHTML('beforeend', newDiv);
    counterCon++;
  }
  console.log('Equipped Weapon 1:', equippedWeapon1);
  console.log('Equipped Weapon 2:', equippedWeapon2);
  console.log('Equipped Armor:', equippedArmor);
  console.log('Equipped Accessories1:', equippedAccessories1);
  console.log('Equipped Accessories2:', equippedAccessories2);
  console.log(inventory)

};

// Function to render icons in inventory
const renderIconInventoryCanvas = () => {
  // Loop through all canvas slots based on itemInventoryMap
  for (let slotId in itemInventoryMap) {
    const item = itemInventoryMap[slotId]; // Get the item associated with this slot
    const canvasSlot = document.getElementById(slotId); // Get corresponding canvas element

    if (!canvasSlot) {
      console.error(`Canvas for ${slotId} not found`);
      continue;
    }

    const ctx = canvasSlot.getContext('2d');
    ctx.clearRect(0, 0, canvasSlot.width, canvasSlot.height); // Clear canvas

    if (!item) {
      // Slot is empty, skip rendering
      continue;
    }

    let config, spriteSheet, spriteX, spriteY;

    // Determine sprite configuration based on item type
    if (item.type === 'weapon') {
      config = canvasList.weapon1;
    } else if (item.type === 'armor') {
      config = canvasList.armor;
    } else if (item.type === 'consumable') {
      config = canvasList.accessories1;
    } else if (item.type === 'consumable') {
      config = canvasList.accessories2;
    } else{
      console.warn(`Unknown item type for item ${item.name}`);
      continue;
    }

    spriteSheet = config.spriteSheet; // The sprite sheet image object
    spriteX = item.x;                 // X position in the sprite sheet
    spriteY = item.y;                 // Y position in the sprite sheet

    // Draw the item sprite onto the canvas
    ctx.drawImage(
      spriteSheet,
      spriteX, spriteY,                      // Source X, Y in sprite sheet
      config.spriteWidth, config.spriteHeight, // Width and height of sprite in sheet
      0, 0,                                  // Destination X, Y in canvas
      canvasSlot.width, canvasSlot.height     // Scale to fit canvas size
    );
  }
};
// Render icon to inventory end here ---

// Render icon back in equipped slot
function updateEquippedSlotDisplay() {
  if (equippedWeapon1) {
    renderIcon(equippedWeapon1, "weapon1-canvas");
  }
  if (equippedWeapon2) {
    renderIcon(equippedWeapon2, "weapon2-canvas");
  }
  if (equippedArmor) {
    renderIcon(equippedArmor, "armor-canvas");
  }
  if (equippedAccessories1) {
    renderIcon(equippedAccessories1, "wearable-accessories1-canvas");
  }
  if (equippedAccessories2) {
    renderIcon(equippedAccessories2, "wearable-accessories2-canvas");
  }
}
// Render icon back in equipped slot end here---

// Move equipment and items to inventory
canvasList.weapon1.canvas.addEventListener('click', () => {
  if (equippedWeapon1 && equippedWeapon1.name) {
    let weaponMove = equippedWeapon1; // Move the whole object
    addItemToInventory(weaponMove); // Add weapon to inventory
    equippedWeapon1 = {};  // Clear the equipped weapon (move it out)

    // Clear the canvas
    const { ctx, width, height } = canvasList.weapon1;
    ctx.clearRect(0, 0, width, height);

    renderIconInventoryCanvas(); // Re-render the inventory icons
  }
});

canvasList.weapon2.canvas.addEventListener('click', () => {
  if (equippedWeapon2 && equippedWeapon2.name) {
    let weaponMove = equippedWeapon2; // Move the whole object
    addItemToInventory(weaponMove); // Add weapon to inventory
    equippedWeapon2 = {};  // Clear the equipped weapon (move it out)

    // Clear the canvas
    const { ctx, width, height } = canvasList.weapon2;
    ctx.clearRect(0, 0, width, height);

    renderIconInventoryCanvas(); // Re-render the inventory icons
  }
});

// Move Armor to Inventory on Click
canvasList.armor.canvas.addEventListener('click', () => {
  if (equippedArmor && equippedArmor.name) {
    let armorMove = equippedArmor; // Move the whole object
    addItemToInventory(armorMove); // Add armor to inventory
    equippedArmor = {};  // Clear the equipped armor

    // Clear the canvas
    const { ctx, width, height } = canvasList.armor;
    ctx.clearRect(0, 0, width, height);

    renderIconInventoryCanvas(); // Re-render the inventory icons
  }
});

// Function to add an item to the first available empty slot in the inventory
const addItemToInventory = (item) => {
  if (!item || !item.name) {  // Check if item is valid
    console.error('Invalid item, cannot add to inventory.');
    return;
  }

  // Find the first available slot in the inventory
  const emptySlotId = Object.keys(itemInventoryMap).find(slotId => itemInventoryMap[slotId] === null);

  if (!emptySlotId) {  // If no available slot found
    console.log('No available inventory slots.');
    return;
  }

  // Add the item to the inventory array and update itemInventoryMap
  inventory.push(item);
  itemInventoryMap[emptySlotId] = item;

  console.log(`Item "${item.name}" added to slot ${emptySlotId} in inventory.`);
  renderIconInventoryCanvas();  // Update the inventory display
};


// Helper function to check if the item is currently equipped
const itemIsCurrentlyEquipped = (item) => {
  return (
    item === equippedWeapon1 ||
    item === equippedWeapon2 ||
    item === equippedArmor ||
    item === equippedAccessories1 ||
    item === equippedAccessories2
  );
};

// Function to Equip weapon, armor, or accessories from inventory
const isEquippedSlotAvailable = (slot) => slot === null; // Utility function
const equipItem = (name, type) => {
  const itemIndex = inventory.findIndex(item => item.name === name && item.type === type);
  if (itemIndex === -1) {
    console.log(`Item ${name} of type ${type} not found in inventory.`);
    return;
  }

  const item = inventory[itemIndex];

  if (type === 'weapon') {
    if (item.hand === 2) { // Two-handed weapon
      [equippedWeapon1, equippedWeapon2].forEach(weapon => {
        console.log("Equipping a two-handed weapon.");
        console.log("Current equipped weapons:", equippedWeapon1, equippedWeapon2);
        if (weapon) {
          console.log(`Unequipping weapon: ${weapon.name}`);
          addItemToInventory(weapon)
        };
      });

      equippedWeapon1 = item;
      equippedWeapon2 = null; // Lock slot 2
      console.log("New state after equipping:", equippedWeapon1, equippedWeapon2);
      renderIcon('weapon1', item.x, item.y);
      renderIcon('weapon2', null); // To clear icon
    } else if (item.hand === 1) { // One-handed weapon
      console.log("Equipping a one-handed weapon.");
      console.log("Current equipped weapons:", equippedWeapon1, equippedWeapon2);
      if (!equippedWeapon1) {
        console.log(`Placing weapon in Slot 1: ${item.name}`);
        equippedWeapon1 = item;
        renderIcon('weapon1', item.x, item.y);
      } else if (!equippedWeapon2) {
        console.log(`Slot 1 occupied. Placing weapon in Slot 2: ${item.name}`);
        equippedWeapon2 = item;
        renderIcon('weapon2', item.x, item.y);
      } else {
        console.log(`Both weapon slots are occupied. Opening modal for weapon: ${item.name}`);
        // If both slots are occupied, open a modal
        openWeaponModal(item);
        return; // Wait for modal selection
      }
      console.log("New state after equipping:", equippedWeapon1, equippedWeapon2);
    }
  } else if (type === 'armor') {
    if (equippedArmor) addItemToInventory(equippedArmor);
    equippedArmor = item;
    renderIcon('armor', item.x, item.y);
  } else if (type === 'accessory') {
    if (!equippedAccessories1) {
      equippedAccessories1 = item;
      renderIcon('accessories1', item.x, item.y);
    } else if (!equippedAccessories2) {
      equippedAccessories2 = item;
      renderIcon('accessories2', item.x, item.y)
    } else {
      openAccessoriesModal(item);
    }
  } else {
    console.log(`Invalid type "${type}".`);
    return;
  }

  inventory.splice(itemIndex, 1);
  renderIconInventoryCanvas(); // Update inventory display
};

// Function to UnEquip weapon, armor, or accessories from inventory
const unequipItemByType = (type) => {
  if (type === 'weapon') {
    if (equippedWeapon1) {
      console.log(`Unequipping "${equippedWeapon1.name}" from Weapon Slot 1.`);
      addItemToInventory(equippedWeapon1);
      equippedWeapon1 = null;
    } else if (equippedWeapon2) {
      console.log(`Unequipping "${equippedWeapon2.name}" from Weapon Slot 2.`);
      addItemToInventory(equippedWeapon2);
      equippedWeapon2 = null;
    } else {
      console.log("No weapons currently equipped.");
    }
  } else if (type === 'armor') {
    if (equippedArmor) {
      console.log(`Unequipping "${equippedArmor.name}".`);
      addItemToInventory(equippedArmor);
      equippedArmor = null;
    } else {
      console.log("No armor currently equipped.");
    }
  } else if (type === 'accessory') {
    if (equippedAccessories1) {
      console.log(`Unequipping "${equippedAccessories1.name}" from Accessories Slot 1.`);
      addItemToInventory(equippedAccessories1);
      equippedAccessories1 = null;
    } else if (equippedAccessories2) {
      console.log(`Unequipping "${equippedAccessories2.name}" from Accessories Slot 2.`);
      addItemToInventory(equippedAccessories2);
      equippedAccessories2 = null;
    } else {
      console.log("No accessories currently equipped.");
    }
  } else {
    console.log(`Invalid type "${type}".`);
  }
  updateEquippedSlotDisplay();  // Update equipped slots
  renderIconInventoryCanvas();  // Update inventory UI
};
// Remove equipment and items and here --
// Equipping item from inventory
inventoryContainer.addEventListener('click', (event) => {
  const target = event.target;

  if (target.tagName === 'CANVAS' && target.id.startsWith('slot-')) {
    const slotId = target.id;
    handleCanvasClick(slotId);

    const item = itemInventoryMap[slotId];
    if (!item) {
      console.log(`No item in slot ${slotId}`);
      return;
    }

    equipItem(item.name, item.type); // Equip the item

    // Do not call addItemToInventory() here after equipping
    itemInventoryMap[slotId] = null; // Clear the map only
    const ctx = target.getContext('2d');
    ctx.clearRect(0, 0, target.width, target.height); // Clear canvas
  }
});

// To handle the modal box to swap weapons between slots
const openWeaponModal = (item) => {
  const modal = document.getElementById('weaponModal');
  modal.style.display = 'block';

  // Button Event Listeners
  document.getElementById('replaceWeapon1').onclick = () => {
    addItemToInventory(equippedWeapon1);
    equippedWeapon1 = item;
    modal.style.display = 'none';
    finalizeEquip();
  };

  document.getElementById('replaceWeapon2').onclick = () => {
    addItemToInventory(equippedWeapon2);
    equippedWeapon2 = item;
    modal.style.display = 'none';
    finalizeEquip();
  };
};

const openAccessoriesModal = (item) => {
  const modal = document.getElementById('acessoriesModal');
  modal.style.display = 'block';

  document.getElementById('replaceAccessories1').onclick = () => {
    addItemToInventory(equippedAccessories1);
    equippedAccessories1 = item;
    modal.style.display = 'none';
    finalizeEquip();
  };

  document.getElementById('replaceAccessories2').onclick = () => {
    addItemToInventory(equippedAccessories2);
    equippedAccessories2 = item;
    modal.style.display = 'none';
    finalizeEquip();
  };
};

const finalizeEquip = () => {
  inventory.splice(itemIndex, 1);
  renderIconInventoryCanvas();
};

function handleCanvasClick(canvasId) {
  console.log(`Canvas with ID ${canvasId} clicked!`);
  console.log('Current Inventory:', inventory);
  console.log('Current itemInventoryMap:', itemInventoryMap);
}

// To handle consumable item
const mainBody = document.getElementById("main-body");
const openConsumableModal = () => {
  const modal = `
  <div id="consumable-modal">
    <a id="consumable-modal-text">Do you want to consume XXX?</a>
    <div>
      <button id="consumable-modal-yes" class="consumable-modal-button">Yes</button>
      <button id="consumable-modal-yes" class="consumable-modal-button">No</button>
    </div>
  </div>
  `;
  mainBody.insertAdjacentHTML('beforeend', modal)
};

console.log('Equipped Weapon 1:', equippedWeapon1);
console.log('Equipped Weapon 2:', equippedWeapon2);
console.log('Equipped Armor:', equippedArmor);
console.log('Equipped Accessories1:', equippedAccessories1);
console.log('Equipped Accessories2:', equippedAccessories2);
console.log(inventory);
console.log(inventoryCanvases);
console.log(itemInventoryMap);

// This section is for drop item page
const exitDropBtn = document.getElementById("exit-drop-item-page");

exitDropBtn.addEventListener("click",() => {
  storeCloseBtn(); // Don't forget to change back the dropItemMsgInventory();
});
button1.addEventListener("click",() => {storeCloseBtn(); dropItemMsgInventory();});
const storeCloseBtn = () => {
  let x = document.getElementById("drop-item-page");
  if (x.style.display === "none") {
    x.style.display = "block";
  } else {
    x.style.display = "none";
  }
};

const randomDropItem = () => {
  const allItems = [...armorList, ...weaponList, ...items];
  const randomIndex = Math.floor(Math.random() * allItems.length);
  const randomItems = allItems[randomIndex];
  return randomItems;
}

const itemDropPage = document.getElementById("drop-item-text");
const dropItemMsgInventory = (item) => {
  item = randomDropItem();
  let message = `You obtained "${item.name}" from the enemy`;
  itemDropPage.innerText = message;
  inventory.push(item);
  addItemToInventory(item);
  addItemToInventory(items[6])
};

// This section is for the text story
// Create the story and button after customize button initialised
const storyTextOption = () => {
  let x = document.getElementById("text-option-container");
  if (x.style.display === "block") {
    x.style.display = "none";
  } else {
    x.style.display = "block";
  }
};

const textElementStory = document.getElementById("text-story");
const optionButtonStory = document.getElementById("text-option-button");
function startGame () { // For testing only
  playerState = {};
  showTextNode(1);
};

let playerState = {};
const showTextNode = (textNodeIndex) => {
  const textNode = textNodes.find(textNode => textNode.id === textNodeIndex);
  textElementStory.innerText = textNode.text;
  while (optionButtonStory.firstChild) {
    optionButtonStory.removeChild(optionButtonStory.firstChild)
  }

  textNode.pathOptions.forEach(option => {
    if (showOption(option)) {
      const button = document.createElement('button');
      button.innerText = option.text;
      button.classList.add('story-button');
      button.addEventListener('click', () => selectOption(option));
      optionButtonStory.appendChild(button);
    }
  })
};

const showOption = (option) => {
  return option.requiredState == null || option.requiredState(playerState)
};

const selectOption = (option) => {
  const nextTextNodeId = option.nextText;
  if (nextTextNodeId <= 0) {
    return startGame()
  };
  playerState = Object.assign(playerState, option.setState);
  showTextNode(nextTextNodeId)
};

const storyText = document.getElementById("main-text");

const textNodes = [
  {
    id: 1,
    text: 'You wake up in a strange place and you see a jar of blueish goo near you.',
    pathOptions: [
      {
        text: 'Take the goo.',
        setState: {blueGoo: true},
        nextText: 2
      },
      {
        text: 'Leave it there.',
        nextText: 2
      }
    ]
  },
  {
    id: 2,
    text: 'You venture forth in seacrh for answer to where you are when you come across some merchant.',
    pathOptions: [
      {
        text: 'Trade the goo for a sword',
        requiredState: (playerState) => playerState.blueGoo,
        setstate: { blueGoo: false, sword: true },
        nextText: 3
      },
      {
        text: 'Trade the goo for a shield',
        requiredState: (playerState) => playerState.blueGoo,
        setstate: { blueGoo: false, shield: true },
        nextText: 3
      },
      {
        text: 'Ignore the merchant',
        nextText: 3
      },
    ]
  },
  {
    id: 3,
    text: 'After leaving the merchant you start to fell tired and stumble upon a small town next to a dangerous looking castle.',
    pathOptions: [
      {
        text: 'Explore the castle',
        nextText: 4
      },
      {
        text: 'Find a room to sleep at the Inn inside the town.',
        nextText: 5
      },
      {
        text: 'Find some clean hay in stable to sleep',
        nextText: 6
      },
    ]
  },
  {
    id: 4,
    text: 'You are too tired that you fall sleep while exploring the castle and are killed by some dangerous animal in your sleep.',
    pathOptions: [
      {
        text: 'Restart',
        nextText: -1
      }
    ]
  },
  {
    id: 5,
    text: 'Without any money to buy a room you break into the nearest inn and fall asleep. After a few hours of sleep the owner of the inn finds you and has the town guard lock you in a cell.',
    pathOptions: [
      {
        text: 'Restart',
        nextText: -1
      }
    ]
  },
  {
    id: 6,
    text: 'You wake up well rested and full of energy ready to explore the nearby castle.',
    pathOptions: [
      {
        text: 'Explore the castle',
        nextText: 7
      }
    ]
  },
  {
    id: 7,
    text: 'While exploring the castle you come across a horrible monster in your path.',
    pathOptions: [
      {
        text: 'Try to run',
        nextText: 8
      },
      {
        text: 'Attack it with your sword',
        requiredState: (currentState) => currentState.sword,
        nextText: 9
      },
      {
        text: 'Hide behind your shield',
        requiredState: (currentState) => currentState.shield,
        nextText: 10
      },
      {
        text: 'Throw the blue goo at it',
        requiredState: (currentState) => currentState.blueGoo,
        nextText: 11
      }
    ]
  },
  {
    id: 8,
    text: 'Your attempts to run are in vain and the monster easily catches.',
    pathOptions: [
      {
        text: 'Restart',
        nextText: -1
      }
    ]
  },
  {
    id: 9,
    text: 'You foolishly thought this monster could be slain with a single sword.',
    pathOptions: [
      {
        text: 'Restart',
        nextText: -1
      }
    ]
  },
  {
    id: 10,
    text: 'The monster laughed as you hid behind your shield and ate you.',
    pathOptions: [
      {
        text: 'Restart',
        nextText: -1
      }
    ]
  },
  {
    id: 11,
    text: 'You threw your jar of goo at the monster and it exploded. After the dust settled you saw the monster was destroyed. Seeing your victory you decide to claim this castle as your and live out the rest of your days there.',
    pathOptions: [
      {
        text: 'Congratulations. Play Again.',
        nextText: -1
      }
    ]
  }
]

// Create bar experience that increase each time player finish a mission or beats enemy
// Make 2 path