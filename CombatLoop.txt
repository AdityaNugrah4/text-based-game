let xp = 0;
let hp = 4;
let sanity = 4;
let health = 300; // initially 100
let initialHealth = health;
let gold = 50;
let currentWeapon = 0;
let monsterHealth;
export let currentMonster;
let inventoryList = ["stick"];
export let battleResultArray = [];
// add xpText and goldText

import { 
  equippedWeapon1, equippedWeapon2, equippedArmor, equippedAccessories1, equippedAccessories2, enemies, hpPool, sanityPool, hpPoolText, sanityPoolText, onBattleResultChange,
} from './script.js'


const playerHealthBar = document.getElementById("player-health");
const monsterHealthBar = document.getElementById("enemy-health");
const healthText = document.getElementById("player-health-text");
const monsterHealthText = document.getElementById("monsters-health-text")
const msgText = document.getElementById("msg-text");
const monstersName = document.getElementById("monsters-name");

const popBattlePage = document.getElementById("pop-up-battle-page");

// Button
const startFight = document.getElementById("start-fight-btn");
const attackBtn = document.getElementById("attack-btn");
const dodgeBtn = document.getElementById("dodge-btn");

playerHealthBar.max = initialHealth;
playerHealthBar.value = health;

const weapons = [
  { name: 'stick', power: 5, penetration: 0.05 },
  { name: 'dagger', power: 30, penetration: 0.1 },
  { name: 'claw hammer', power: 50, penetration: 0.15 },
  { name: 'sword', power: 100, penetration: 0.25 }
];

const monstersList = [
  {
    name: "slime",
    level: 2,
    health: 15,
    defense: 0.05
  },
  {
    name: "fanged beast",
    level: 8,
    health: 30,
    defense: 0.1
  },
  {
    name: "dragon",
    level: 20,
    health: 30,
    defense: 0.4
  }
];

// initialize buttons
const battlePage = document.getElementById("battle-page");
export const testBattleButton = () => {
  popBattlePage.style.display = 'block';
  attackBtn.style.display = 'none'; // Hide attack button
  dodgeBtn.style.display = 'none'; // Hide dodge button

  startFight.addEventListener('click', () => {
    chooseEnemy();
    startFight.style.display = 'none'; // Hide start fight button once the fight begins
    attackBtn.style.display = 'inline'; // Show attack button
    dodgeBtn.style.display = 'inline'; // Show dodge button
  });
  attackBtn.addEventListener('click', () => {
    attackInitiate();
    // add attack animation here
  });
  dodgeBtn.addEventListener('click', () => {
    dodge();
    // add dodge animation here
  });
};

export const chooseCurrentMonster = (monster) => {
  currentMonster = monster; // To choose specific enemy from textNode
};

const chooseEnemy = () => {
  const limitRandomEnemies = 3;
  if (!currentMonster) { // To handle if condition whether the enemy is predetermined or random
    let trueLimited = Math.min(limitRandomEnemies, enemies.length);
    const randomIndex = Math.floor(Math.random() * trueLimited);
    currentMonster = enemies[randomIndex];
    console.warn("No specific monster chosen.  Selecting random monster: ", currentMonster.name);
  }
  
  console.log("currentMonster:", currentMonster);
  console.log("currentMonster.health:", currentMonster.health);
  console.log("Enemies array:", enemies);

  monstersName.textContent = currentMonster.name;
  monsterHealth = currentMonster.health;
  playerHealthBar.value = health; // To trigger the player health
  healthText.innerText = health;
  monsterHealthBar.max = monsterHealth; // Set monster max health
  monsterHealthBar.value = monsterHealth;

  resetHealth();

  healthText.innerText = health;
  monsterHealthText.innerText = monsterHealth;

  if (msgText) {
    msgText.innerText = `A wild ${currentMonster.name} appears!`;
  }
};

const updateFight = () => { //need to edit

};

//
const attackInitiate = () => {
// Reset message text before adding new message
  msgText.innerText = "";

  // Let the player attack first
  const monsterDefeated = playerAttack();
  // Only let the monster attack if itâ€™s still alive
  if (!monsterDefeated && monsterHealth > 0) {
    monstersAttack();
  }
};

const playerAttack = () => { // Player attack loop
  msgText.innerText = "";

  let damage = Math.floor((1 - currentMonster.defense) * weapons[currentWeapon].power + Math.floor(Math.random() * xp) + 1);

  if (isMonsterHit()) {
    monsterHealth -= Math.max(0, Math.floor((1 - currentMonster.defense) * weapons[currentWeapon].power + Math.floor(Math.random() * xp) + 1));
    msgText.innerText += ` You hit the ${currentMonster.name} for ${damage} damage.`;
    // add variable to detect player hit and delay monsterAttack animation
  } else {
    msgText.innerText += " You miss.";
  }

  monsterHealthText.innerText = monsterHealth;
  monsterHealthBar.value = monsterHealth;

  if (monsterHealth <= 0) {
    result(); // Result of the battle
    // Reset health and proceed with the game (e.g., move to the next location)
  }
};

const monstersAttack = () => { // Monsters attack loop
  msgText.innerText = `\nThe ${currentMonster.name} attacks you!`;

  health = Math.max(0, health -= getMonsterAttackValue(currentMonster.level));
  healthText.innerText = health;
  playerHealthBar.max = initialHealth;
  playerHealthBar.value = health;

  if (health <= 0) {
    result();
  }
};

const result = () => {
  // Reset battleResult (this triggers onBattleResultChange, but holdNextText is null so nothing happens)
  battleResult.length = 0;
  if (health <= 0) {
    battleResultArray.push('lose');
    msgText.innerText = `You were defeated by the ${currentMonster.name}.`;
    // this is where hp and sanity subtracted
    /* hpPool -= 1;
    hpText.innerText = health;
    sanityPool -= 1;
    sanityText.innerText = sanity; */
    setTimeout(() => {
      popBattlePage.style.display = 'none';
      resetHealth();
      currentMonster = null;
      startFight.style.display = 'block';
    }, 2000); // 2 second delay to close the page

    /* setTimeout(() => {
      chooseEnemy(); // Choose a new monster
    }, 2000); */ // Delay for a brief moment before a new monster appears
    
  } else if (monsterHealth <= 0) {
    battleResultArray.push('won');
    msgText.innerText += ` You defeated the ${currentMonster.name}!`;
    defeatMonster();
    setTimeout(() => {
      popBattlePage.style.display = 'none';
      resetHealth();
      currentMonster = null;
      startFight.style.display = 'block';
    }, 2000);
    /* setTimeout(() => {
      chooseEnemy(); // Choose a new monster
    }, 2000); */ // Delay for a brief moment before a new monster appears
  } // need to add if hp or sanity less than 0 = game over
};

const resultHandler = {
  set(target, property, value, receiver) {
    const result = Reflect.set(target, property, value, receiver);
    // to check if the property is numeric (an index) or the "length" property.
    if (!isNaN(property) || property === "length") {
      // Whenever a change occurs, call the function that triggers your nextText logic.
      onBattleResultChange();
    }
    return result;
  }
};

export let battleResult = new Proxy (battleResultArray, resultHandler);

const resetHealth = () => {
  health = initialHealth;
  playerHealthBar.value = health;
};

// 
const playerLoseBattle = () => {

};

function getMonsterAttackValue(level) {
  const hit = (level * 5) - (Math.floor(Math.random() * xp)); // need to change level to attack as a base for monster attack multiplier value
  console.log(hit);
  // Conditional (ternary) operator //
  return hit > 0 ? hit : 0;
};

function isMonsterHit() {
  return Math.random() > .2 || health < 20;
};

function dodge() {
  msgText.innerText = "You dodge the attack from the " + currentMonster.name;
};

function defeatMonster() { // need to edit
  gold += Math.floor(currentMonster.level * 6.7);
  xp += currentMonster.level;
  // add gold text and xp text
};

console.log(battleResultArray);